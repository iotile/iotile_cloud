# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#

service: health

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">=1.37.0 < 1.38.0"

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-east-1
  memorySize: 128
  deploymentBucket: cloud.iotile.serverless.health
  environment:
    dynamodb_workerlog_table_name: "iotile-worker-logs-${self:custom.stage}"
    sqs_queue_name: "iotile-worker-${self:custom.stage}"
    sns_topic: "arn:aws:sns:us-east-1:xxxxxxxxxxxxxx:iotile-staff-notification-${self:custom.stage}"
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource: "arn:aws:sqs:us-east-1:xxxxxxxxxxxxxx:iotile-worker-*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "arn:aws:sqs:us-east-1:xxxxxxxxxxxxxx:iotile-worker-logs-${self:custom.stage}"
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource: "arn:aws:sns:us-east-1:xxxxxxxxxxxxxx:iotile-staff-notification-${self:custom.stage}"

custom:
  stage: "${opt:stage, self:provider.stage}"

# you can add packaging information here
package:
  exclude:
    - README.md

functions:
  workerCheck:
    handler: worker_check.publish_worker_healthcheck
    events:
      - schedule:
          name: hour-worker-check-${self:custom.stage}
          description: 'Send SQS to worker for self-test'
          rate: rate(1 hour)
  deviceCheck:
    handler: generic_cron_job.schedule_job
    environment:
      task_module: "apps.physicaldevice.worker.device_status_check"
      task_class: "DeviceStatusCheckAction"
      task_span: "0.5h"
    events:
      - schedule:
          name: device_check-${self:custom.stage}
          description: 'Send SQS to worker to check for device statuses'
          enabled: true
          rate: cron(0/30 * * * ? *)
  streamDataCheck:
    handler: stream_data_check.publish_stream_data_healthcheck
    events:
      - schedule:
          name: hour-stream-data-check-${self:custom.stage}
          description: 'Send SQS to worker for StreamData self-test'
          rate: rate(1 hour)
  cleanupWorkerLogs:
    handler: cleanup_worker_logs.cleanup_worker_logs
    events:
      - schedule:
          name: day-clean-up-${self:custom.stage}
          description: 'Cleanup worker logs'
          rate: cron(0 12 * * ? *)
  workerCollectStats:
    handler: worker_collect_stats.publish_worker_collect_stats
    events:
      - schedule:
          name: day-collect-stats-${self:custom.stage}
          description: 'Send SQS to worker to collect daily statistics'
          enabled: false
          rate: cron(0 12 * * ? *)
  collectDbStats:
    handler: generic_cron_job.schedule_job
    environment:
      task_module: "apps.staff.worker.dbstats"
      task_class: "DbStatsAction"
      task_span: "d"
    events:
      - schedule:
          name: day-collect-dbstats-${self:custom.stage}
          description: 'Send SQS to worker to collect daily database statistics'
          enabled: true
          rate: cron(0 7 * * ? *)
  cacheOEE:
    handler: generic_cron_job.schedule_job
    environment:
      task_module: "apps.verticals.factory.worker.schedule_caching"
      task_class: "ScheduleOEECachingAction"
      task_span: "h"
    events:
      - schedule:
          name: oee-caching-${self:custom.stage}
          description: "Schedule caching of OEE data for all machines (Once an hour, 10min after the hr)"
          enabled: true
          rate: cron(10 * * * ? *)
